{"version":3,"sources":["productcontent/productcontent.module.css","productpreview/preview.module.css","App.module.css","navbar/navbar.module.css","productpreview/PreviewProduct.js","ProductData.js","productcontent/ProductContent.js","navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","preview","props","className","classes","src","currentPreviewImg","alt","timedisplay","showheartfeature","ProductData","title","description","colorOptions","styleName","imageUrl","featureList","productcontent","data","map","items","pos","arr","productimg","currentPreviewImgpos","push","selectedimg","onClick","imgchange","key","join","featureitem","selectedfeatureitem","btnchange","datahead","producttitle","databody","buttons","buy","head","header","App","state","productData","setState","updatedstate","Navbar","main","currentbtnpos","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.96a9c6e9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"data\":\"productcontent_data__1HHdn\",\"producttitle\":\"productcontent_producttitle__G5v71\",\"databody\":\"productcontent_databody__33s4O\",\"datahead\":\"productcontent_datahead__2LWfN\",\"buy\":\"productcontent_buy__3Vj8e\",\"featureitem\":\"productcontent_featureitem__Kx8Th\",\"selectedfeatureitem\":\"productcontent_selectedfeatureitem__3sohE\",\"productimg\":\"productcontent_productimg__ktDwE\",\"selectedimg\":\"productcontent_selectedimg__fRhf4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preview\":\"preview_preview__DjoYg\",\"timedisplay\":\"preview_timedisplay__3UP5e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__3klQv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"navbar_header__N80c9\"};","import React from 'react';\r\n\r\nimport classes from './preview.module.css'\r\n\r\nconst preview = (props)=>{\r\n\r\n    return(\r\n        <div className={classes.preview}>\r\n      \r\n      <img  src={props.currentPreviewImg} alt=\"watch\"></img>\r\n          \r\n            <div className={classes.timedisplay}> \r\n\r\n    {\r\n        props.showheartfeature ?   <p>69</p> :<p>12:26</p>\r\n    }\r\n\r\n            \r\n            \r\n           </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default preview","\r\nconst ProductData = {\r\n    title: 'FitBit 19 - The Smartest Watch',\r\n    description: 'Lorem ipsum dolor Lorem ipsum dolor Lorem ipsum dolor Lorem ipsum dolor Lorem ipsum dolor Lorem ipsum dolor.',\r\n    colorOptions: [\r\n        {\r\n            styleName: 'Black Strap',\r\n            imageUrl: 'https://imgur.com/iOeUBV7.png'\r\n        },\r\n        {\r\n            styleName: 'Red Strap',\r\n            imageUrl: 'https://imgur.com/PTgQlim.png'\r\n        },\r\n        {\r\n            styleName: 'Blue Strap',\r\n            imageUrl: 'https://imgur.com/Mplj1YR.png'\r\n        },\r\n        {\r\n            styleName: 'Purple Strap',\r\n            imageUrl: 'https://imgur.com/xSIK4M8.png'\r\n        },\r\n    ],\r\n    featureList: [\r\n        \"Time\", \"Heart Rate\"\r\n    ]\r\n}\r\n\r\nexport default ProductData","import React from 'react'\r\n\r\nimport classes from './productcontent.module.css'\r\n\r\n\r\nconst productcontent = (props)=>{\r\n\r\nconst colorOptions= props.data.colorOptions.map((items,pos)=>{\r\n\r\n  const arr=[classes.productimg]\r\n \r\n  if(pos=== props.currentPreviewImgpos){\r\n    arr.push(classes.selectedimg)\r\n  }\r\n  \r\n  return(\r\n    <img onClick={()=>props.imgchange(pos)} key={pos} className={arr.join(' ')} src={items.imageUrl} alt={items.styleName} ></img>\r\n  );\r\n})\r\n\r\nconst featureList= props.data.featureList.map((items,pos)=>{\r\n  \r\n  const arr=[classes.featureitem]\r\n\r\n  if(pos===1 && props.showheartfeature)\r\n  {\r\n    arr.push(classes.selectedfeatureitem);\r\n  }\r\n  else if(pos===0 && !props.showheartfeature){\r\n    arr.push(classes.selectedfeatureitem);\r\n  }\r\n\r\n  return(\r\n  <button onClick={()=>props.btnchange(pos)}  key={pos} className={arr.join(' ')}>{items}</button>\r\n  );\r\n})\r\n  \r\n    return(\r\n         <div className={classes.data} >\r\n        <div className={classes.datahead}>\r\n        <h1 className={classes.producttitle}>{props.data.title}</h1>\r\n        <div className={classes.producttitle}>{props.data.description}</div>\r\n        </div>\r\n           <h3 className={classes.producttitle}>Select color</h3> \r\n           <div className={classes.databody}>\r\n          {colorOptions}\r\n         { /*<img className={[classes.productimg, classes.selectedimg].join(' ')} src=\"https://imgur.com/iOeUBV7.png\" alt=\"black\"></img>\r\n          <img className={classes.productimg} src=\"https://imgur.com/PTgQlim.png\" alt=\"red\" ></img>\r\n          <img className={classes.productimg} src=\"https://imgur.com/Mplj1YR.png\" alt=\"blue\"></img>\r\n          <img className={classes.productimg} src=\"https://imgur.com/xSIK4M8.png\" alt=\"purple\"></img>\r\n    */}         \r\n          </div>\r\n        <h3>Select Feature</h3>\r\n        <div className={classes.buttons}>\r\n          {featureList}\r\n         {/* <button onClick={timebtn} className={classes.time}>Time</button>\r\n          <button onClick={timebtn} className={classes.heart}>Heart Rate</button>\r\n */}         \r\n          </div>\r\n          <button className={classes.buy} >Buy Now</button>\r\n          </div>\r\n    );\r\n}\r\nexport default productcontent","import React from 'react'\r\n\r\nimport classes from './navbar.module.css'\r\nconst head=(props)=>{\r\n    return(\r\n        <header className={classes.header}>\r\n        <nav>\r\n          <img src=\"https://i.dlpng.com/static/png/197684_preview.png\" alt=\"amazon\"/>\r\n        </nav>\r\n      </header>\r\n        \r\n    );\r\n\r\n}\r\nexport default head","import React from 'react';\n\nimport classes from './App.module.css';\n\nimport ProductPreview from './productpreview/PreviewProduct';\n\nimport ProductData from './ProductData'\n\nimport ContentProduct from './productcontent/ProductContent';\n\nimport Navbar from './navbar/Navbar'\n\nclass App extends React.Component{\n\n state={\n   productData: ProductData,\n   \n   showheartfeature: false,\n   currentPreviewImgpos: 0,\n\n   \n }\n\n imgchange=(pos)=>{\n  \n   this.setState({currentPreviewImgpos: pos})\n }\n\n btnchange=(pos)=>{\n   let updatedstate = false;\n   if(pos==1){\n     updatedstate = true;\n   }\n  this.setState({showheartfeature: updatedstate})\n }\n  \n// plus=ProductData.map((items)=>{\n//  return(\n//    <div>\n//  <div>{items.title}</div>\n//  <div>{items.description}</div>\n//  </div>\n//  );\n//})\n\n \n//const currhr= new Date().getHours()>9 ? new Date().getHours() : '0' + new Date().getHours();\n//const currmin= new Date().getMinutes()>9 ? new Date().getMinutes() : '0' + new Date().getMinutes();\nrender(){\nreturn (\n\n    <div className=\"App\">\n      \n     <Navbar/>\n <div className={classes.main}>\n         <ProductPreview currentbtnpos={this.state.productData.featureList[this.state.currentbtnpos]} \n         currentPreviewImg={this.state.productData.colorOptions[this.state.currentPreviewImgpos].imageUrl}\n         showheartfeature={this.state.showheartfeature}  />\n          <ContentProduct \n        data={this.state.productData} showheartfeature={this.state.showheartfeature} btnchange={this.btnchange}  currentPreviewImgpos={this.state.currentPreviewImgpos} imgchange={this.imgchange}/>\n </div>\n\n    </div>\n    \n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}